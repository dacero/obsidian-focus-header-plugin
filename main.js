/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FocusHeaderPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_language = require("@codemirror/language");
var FocusHeaderPlugin = class extends import_obsidian.Plugin {
  onload() {
    this.addCommand({
      id: "focus-on-current-header-smart",
      name: "Focus on Current Header",
      editorCallback: (editor, view) => {
        this.focusOnCurrentHeader(editor);
      }
    });
    this.addCommand({
      id: "focus-next-sibling-header",
      name: "Focus on Next Header",
      editorCallback: (editor, view) => {
        this.focusOnNextSibling(editor);
      }
    });
    this.addCommand({
      id: "focus-previous-sibling-header",
      name: "Focus on Previous Header",
      editorCallback: (editor, view) => {
        this.focusOnPreviousSibling(editor);
      }
    });
  }
  focusOnCurrentHeader(editor) {
    var _a, _b;
    const cm = editor.cm;
    const state = cm.state;
    const cursorLine = editor.getCursor().line;
    const lines = editor.getValue().split("\n");
    const headers = [];
    let lastByLevel = {};
    for (let i = 0; i < lines.length; i++) {
      const match = lines[i].match(/^(#+)\s/);
      if (match) {
        const level = match[1].length;
        const node = { line: i, level };
        for (let l = level - 1; l >= 1; l--) {
          if (lastByLevel[l]) {
            node.parent = lastByLevel[l];
            break;
          }
        }
        headers.push(node);
        lastByLevel[level] = node;
      }
    }
    let currentHeader;
    for (let i = headers.length - 1; i >= 0; i--) {
      if (headers[i].line <= cursorLine) {
        currentHeader = headers[i];
        break;
      }
    }
    if (!currentHeader)
      return;
    const unfoldLines = /* @__PURE__ */ new Set();
    let ancestor = currentHeader;
    while (ancestor) {
      unfoldLines.add(ancestor.line);
      ancestor = ancestor.parent;
    }
    const collectDescendants = (node) => {
      unfoldLines.add(node.line);
      for (const child of headers) {
        if (child.parent === node) {
          collectDescendants(child);
        }
      }
    };
    collectDescendants(currentHeader);
    const effects = [];
    for (const header of headers) {
      const from = state.doc.line(header.line + 1).from;
      const range = (0, import_language.foldable)(state, from);
      if (!range)
        continue;
      if (unfoldLines.has(header.line)) {
        effects.push(import_language.unfoldEffect.of(range));
      } else {
        effects.push(import_language.foldEffect.of(range));
      }
    }
    cm.dispatch({ effects });
    const pos = state.doc.line(currentHeader.line + 1).from;
    cm.scrollDOM.scrollTop = (_b = (_a = cm.coordsAtPos(pos)) == null ? void 0 : _a.top) != null ? _b : 0;
  }
  focusOnNextSibling(editor) {
    var _a, _b;
    const cm = editor.cm;
    const state = cm.state;
    const cursorLine = editor.getCursor().line;
    const lines = editor.getValue().split("\n");
    const headers = [];
    let lastByLevel = {};
    for (let i = 0; i < lines.length; i++) {
      const match = lines[i].match(/^(#+)\s/);
      if (match) {
        const level2 = match[1].length;
        const node = { line: i, level: level2 };
        for (let l = level2 - 1; l >= 1; l--) {
          if (lastByLevel[l]) {
            node.parent = lastByLevel[l];
            break;
          }
        }
        headers.push(node);
        lastByLevel[level2] = node;
      }
    }
    let currentHeaderIndex = -1;
    for (let i = headers.length - 1; i >= 0; i--) {
      if (headers[i].line <= cursorLine) {
        currentHeaderIndex = i;
        break;
      }
    }
    if (currentHeaderIndex === -1)
      return;
    const currentHeader = headers[currentHeaderIndex];
    const level = currentHeader.level;
    let nextSibling;
    for (let i = currentHeaderIndex + 1; i < headers.length; i++) {
      if (headers[i].level === level && headers[i].parent === currentHeader.parent) {
        nextSibling = headers[i];
        break;
      }
      if (headers[i].level <= level)
        break;
    }
    if (!nextSibling)
      return;
    const unfoldLines = /* @__PURE__ */ new Set();
    let ancestor = nextSibling;
    while (ancestor) {
      unfoldLines.add(ancestor.line);
      ancestor = ancestor.parent;
    }
    const collectDescendants = (node) => {
      unfoldLines.add(node.line);
      for (const child of headers) {
        if (child.parent === node) {
          collectDescendants(child);
        }
      }
    };
    collectDescendants(nextSibling);
    const effects = [];
    for (const header of headers) {
      const from = state.doc.line(header.line + 1).from;
      const range = (0, import_language.foldable)(state, from);
      if (!range)
        continue;
      if (unfoldLines.has(header.line)) {
        effects.push(import_language.unfoldEffect.of(range));
      } else {
        effects.push(import_language.foldEffect.of(range));
      }
    }
    cm.dispatch({ effects });
    const pos = state.doc.line(nextSibling.line + 1).from;
    cm.scrollDOM.scrollTop = (_b = (_a = cm.coordsAtPos(pos)) == null ? void 0 : _a.top) != null ? _b : 0;
    editor.setCursor({ line: nextSibling.line, ch: 0 });
  }
  focusOnPreviousSibling(editor) {
    var _a, _b;
    const cm = editor.cm;
    const state = cm.state;
    const cursorLine = editor.getCursor().line;
    const lines = editor.getValue().split("\n");
    const headers = [];
    let lastByLevel = {};
    for (let i = 0; i < lines.length; i++) {
      const match = lines[i].match(/^(#+)\s/);
      if (match) {
        const level2 = match[1].length;
        const node = { line: i, level: level2 };
        for (let l = level2 - 1; l >= 1; l--) {
          if (lastByLevel[l]) {
            node.parent = lastByLevel[l];
            break;
          }
        }
        headers.push(node);
        lastByLevel[level2] = node;
      }
    }
    let currentHeaderIndex = -1;
    for (let i = headers.length - 1; i >= 0; i--) {
      if (headers[i].line <= cursorLine) {
        currentHeaderIndex = i;
        break;
      }
    }
    if (currentHeaderIndex === -1)
      return;
    const currentHeader = headers[currentHeaderIndex];
    const level = currentHeader.level;
    let prevSibling;
    for (let i = currentHeaderIndex - 1; i >= 0; i--) {
      if (headers[i].level === level && headers[i].parent === currentHeader.parent) {
        prevSibling = headers[i];
        break;
      }
      if (headers[i].level <= level)
        break;
    }
    if (!prevSibling)
      return;
    const unfoldLines = /* @__PURE__ */ new Set();
    let ancestor = prevSibling;
    while (ancestor) {
      unfoldLines.add(ancestor.line);
      ancestor = ancestor.parent;
    }
    const collectDescendants = (node) => {
      unfoldLines.add(node.line);
      for (const child of headers) {
        if (child.parent === node) {
          collectDescendants(child);
        }
      }
    };
    collectDescendants(prevSibling);
    const effects = [];
    for (const header of headers) {
      const from = state.doc.line(header.line + 1).from;
      const range = (0, import_language.foldable)(state, from);
      if (!range)
        continue;
      if (unfoldLines.has(header.line)) {
        effects.push(import_language.unfoldEffect.of(range));
      } else {
        effects.push(import_language.foldEffect.of(range));
      }
    }
    cm.dispatch({ effects });
    const pos = state.doc.line(prevSibling.line + 1).from;
    cm.scrollDOM.scrollTop = (_b = (_a = cm.coordsAtPos(pos)) == null ? void 0 : _a.top) != null ? _b : 0;
    editor.setCursor({ line: prevSibling.line, ch: 0 });
  }
};
//# sourceMappingURL=data:application/json;base64,
